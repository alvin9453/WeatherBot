{
  "_args": [
    [
      {
        "raw": "linebot",
        "scope": null,
        "escapedName": "linebot",
        "name": "linebot",
        "rawSpec": "",
        "spec": "latest",
        "type": "tag"
      },
      "/home/alvin/Works/LineBot"
    ]
  ],
  "_from": "linebot@latest",
  "_id": "linebot@1.3.0",
  "_inCache": true,
  "_location": "/linebot",
  "_nodeVersion": "6.9.1",
  "_npmOperationalInternal": {
    "host": "packages-18-east.internal.npmjs.com",
    "tmp": "tmp/linebot-1.3.0.tgz_1489821239193_0.29895579535514116"
  },
  "_npmUser": {
    "name": "boybundit",
    "email": "boybundit@hotmail.com"
  },
  "_npmVersion": "4.0.5",
  "_phantomChildren": {},
  "_requested": {
    "raw": "linebot",
    "scope": null,
    "escapedName": "linebot",
    "name": "linebot",
    "rawSpec": "",
    "spec": "latest",
    "type": "tag"
  },
  "_requiredBy": [
    "#USER",
    "/"
  ],
  "_resolved": "https://registry.npmjs.org/linebot/-/linebot-1.3.0.tgz",
  "_shasum": "913fd35f44b04c821733b993cd307198dc4fe37b",
  "_shrinkwrap": null,
  "_spec": "linebot",
  "_where": "/home/alvin/Works/LineBot",
  "author": {
    "name": "Bundit Jitkongchuen"
  },
  "bugs": {
    "url": "https://github.com/boybundit/linebot/issues"
  },
  "dependencies": {
    "body-parser": "^1.15.2",
    "node-fetch": "^1.6.3"
  },
  "description": "Node.js SDK for the LINE Messaging API",
  "devDependencies": {
    "eslint": "^3.7.1",
    "eslint-config-airbnb": "^12.0.0",
    "eslint-plugin-import": "^1.16.0",
    "eslint-plugin-jsx-a11y": "^2.2.3",
    "eslint-plugin-react": "^6.4.1",
    "mocha": "^3.1.0"
  },
  "directories": {},
  "dist": {
    "shasum": "913fd35f44b04c821733b993cd307198dc4fe37b",
    "tarball": "https://registry.npmjs.org/linebot/-/linebot-1.3.0.tgz"
  },
  "files": [
    "index.js",
    "lib/**"
  ],
  "gitHead": "bc69d821a1c7d067ddaf501c0e198577ab838fdf",
  "homepage": "https://github.com/boybundit/linebot#readme",
  "keywords": [
    "LINE",
    "Messaging",
    "API",
    "chat",
    "bot"
  ],
  "license": "MIT",
  "main": "index.js",
  "maintainers": [
    {
      "name": "boybundit",
      "email": "boybundit@hotmail.com"
    }
  ],
  "name": "linebot",
  "optionalDependencies": {},
  "readme": "# linebot\r\n\r\n  [![NPM Version][npm-image]][npm-url]\r\n  [![NPM Downloads][downloads-image]][downloads-url]\r\n  [![NPM Dependencies][dependencies-image]][dependencies-url]\r\n  [![Build][travis-image]][travis-url]\r\n\r\nLINE Messaging API for Node.js\r\n\r\n# About LINE Messaging API\r\n\r\nPlease refer to the official API documents for details.\r\n- Developer Documents - https://developers.line.me/messaging-api/overview\r\n- API Reference - https://devdocs.line.me/en/#messaging-api\r\n\r\n# Installation\r\n\r\n```bash\r\n$ npm install linebot --save\r\n```\r\n\r\n# Usage\r\n\r\n```js\r\nvar linebot = require('linebot');\r\n\r\nvar bot = linebot({\r\n\tchannelId: CHANNEL_ID,\r\n\tchannelSecret: CHANNEL_SECRET,\r\n\tchannelAccessToken: CHANNEL_ACCESS_TOKEN\r\n});\r\n\r\nbot.on('message', function (event) {\r\n\tevent.reply(event.message.text).then(function (data) {\r\n\t\t// success\r\n\t}).catch(function (error) {\r\n\t\t// error\r\n\t});\r\n});\r\n\r\nbot.listen('/linewebhook', 3000);\r\n```\r\n\r\n### Using with your own [Express.js][express-url] server\r\n```js\r\nconst app = express();\r\nconst linebotParser = bot.parser();\r\napp.post('/linewebhook', linebotParser);\r\napp.listen(3000);\r\n```\r\n\r\n# API\r\n\r\n## linebot(config)\r\nCreate LineBot instance with specified configuration.\r\n```js\r\nvar bot = linebot({\r\n\tchannelId: CHANNEL_ID,\r\n\tchannelSecret: CHANNEL_SECRET,\r\n\tchannelAccessToken: CHANNEL_ACCESS_TOKEN,\r\n\tverify: true // Verify 'X-Line-Signature' header (default=true)\r\n});\r\n```\r\n\r\n## LineBot.listen(webHookPath, port, callback)\r\n\r\nStart built-in http server on the specified `port`,\r\nand accept POST request callback on the specified `webHookPath`.\r\n\r\nThis method is provided for convenience.\r\nYou can write you own server and use `verify` and `parse` methods to process webhook events.\r\nSee `examples/echo-express-long.js` for example.\r\n\r\n## LineBot.parser()\r\n\r\nCreate [Express.js][express-url] middleware to parse the request.\r\n\r\nThe parser assumes that the request body has never been parsed by any body parser before,\r\nso it must be placed BEFORE any generic body parser e.g. `app.use(bodyParser.json());`\r\n\r\n## LineBot.verify(rawBody, signature)\r\n\r\nVerify `X-Line-Signature` header.\r\n\r\n## LineBot.parse(body)\r\n\r\nProcess incoming webhook request, and raise an event.\r\n\r\n## LineBot.on(eventType, eventHandler)\r\n\r\nRaised when a [Webhook event][webhook-event-url] is received.\r\n```js\r\nbot.on('message',  function (event) { });\r\nbot.on('follow',   function (event) { });\r\nbot.on('unfollow', function (event) { });\r\nbot.on('join',     function (event) { });\r\nbot.on('leave',    function (event) { });\r\nbot.on('postback', function (event) { });\r\nbot.on('beacon',   function (event) { });\r\n```\r\n## LineBot.push(to, message)\r\n\r\nSend push message.\r\n\r\n`to` is a userId, or an array of userId.\r\nA userId can be saved from `event.source.userId`\r\nwhen added as a friend (follow event), or during the chat (message event).\r\n\r\n`message` can be a string, an array of string,\r\na [Send message][send-message-url] object,\r\nor an array of [Send message][send-message-url] objects.\r\n\r\n## LineBot.multicast(to, message)\r\n\r\nSend push message to multiple users (Max: 150 users).\r\nThis is more efficient than `push` as it will make api call only once.\r\n\r\n`to` is an array of userId.\r\n\r\n`message` can be a string, an array of string,\r\na [Send message][send-message-url] object,\r\nor an array of [Send message][send-message-url] objects.\r\n\r\n## LineBot.leaveGroup(groupId)\r\n\r\nLeave a group.\r\n\r\n## LineBot.leaveRoom(roomId)\r\n\r\nLeave a room.\r\n\r\n## Event.reply(message)\r\n\r\nRespond to the event.\r\n\r\n`message` can be a string, an array of string,\r\na [Send message][send-message-url] object,\r\nor an array of [Send message][send-message-url] objects.\r\n\r\nReturn a [Promise][promise-url] object from [`node-fetch`][node-fetch-url] module.\r\n\r\nThis is a shorthand for `LineBot.reply(event.replyToken, message);`\r\n\r\n```js\r\nevent.reply('Hello, world').then(function (data) {\r\n\t// success\r\n}).catch(function (error) {\r\n\t// error\r\n});\r\n\r\nevent.reply({ type: 'text', text: 'Hello, world' });\r\n\r\nevent.reply([\r\n\t{ type: 'text', text: 'Hello, world 1' },\r\n\t{ type: 'text', text: 'Hello, world 2' }\r\n]);\r\n\r\nevent.reply({\r\n\ttype: 'image',\r\n\toriginalContentUrl: 'https://example.com/original.jpg',\r\n\tpreviewImageUrl: 'https://example.com/preview.jpg'\r\n});\r\n\r\nevent.reply({\r\n\ttype: 'video',\r\n\toriginalContentUrl: 'https://example.com/original.mp4',\r\n\tpreviewImageUrl: 'https://example.com/preview.jpg'\r\n});\r\n\r\nevent.reply({\r\n\ttype: 'audio',\r\n\toriginalContentUrl: 'https://example.com/original.m4a',\r\n\tduration: 240000\r\n});\r\n\r\nevent.reply({\r\n\ttype: 'location',\r\n\ttitle: 'my location',\r\n\taddress: '〒150-0002 東京都渋谷区渋谷２丁目２１−１',\r\n\tlatitude: 35.65910807942215,\r\n\tlongitude: 139.70372892916203\r\n});\r\n\r\nevent.reply({\r\n\ttype: 'sticker',\r\n\tpackageId: '1',\r\n\tstickerId: '1'\r\n});\r\n\r\nevent.reply({\r\n\ttype: 'imagemap',\r\n\tbaseUrl: 'https://example.com/bot/images/rm001',\r\n\taltText: 'this is an imagemap',\r\n\tbaseSize: { height: 1040, width: 1040 },\r\n\tactions: [{\r\n\t\ttype: 'uri',\r\n\t\tlinkUri: 'https://example.com/',\r\n\t\tarea: { x: 0, y: 0, width: 520, height: 1040 }\r\n\t}, {\r\n\t\ttype: 'message',\r\n\t\ttext: 'hello',\r\n\t\tarea: { x: 520, y: 0, width: 520, height: 1040 }\r\n\t}]\r\n});\r\n\r\nevent.reply({\r\n\ttype: 'template',\r\n\taltText: 'this is a buttons template',\r\n\ttemplate: {\r\n\t\ttype: 'buttons',\r\n\t\tthumbnailImageUrl: 'https://example.com/bot/images/image.jpg',\r\n\t\ttitle: 'Menu',\r\n\t\ttext: 'Please select',\r\n\t\tactions: [{\r\n\t\t\ttype: 'postback',\r\n\t\t\tlabel: 'Buy',\r\n\t\t\tdata: 'action=buy&itemid=123'\r\n\t\t}, {\r\n\t\t\ttype: 'postback',\r\n\t\t\tlabel: 'Add to cart',\r\n\t\t\tdata: 'action=add&itemid=123'\r\n\t\t}, {\r\n\t\t\ttype: 'uri',\r\n\t\t\tlabel: 'View detail',\r\n\t\t\turi: 'http://example.com/page/123'\r\n\t\t}]\r\n\t}\r\n});\r\n\r\nevent.reply({\r\n\ttype: 'template',\r\n\taltText: 'this is a confirm template',\r\n\ttemplate: {\r\n\t\ttype: 'confirm',\r\n\t\ttext: 'Are you sure?',\r\n\t\tactions: [{\r\n\t\t\ttype: 'message',\r\n\t\t\tlabel: 'Yes',\r\n\t\t\ttext: 'yes'\r\n\t\t}, {\r\n\t\t\ttype: 'message',\r\n\t\t\tlabel: 'No',\r\n\t\t\ttext: 'no'\r\n\t\t}]\r\n\t}\r\n});\r\n\r\nevent.reply({\r\n\ttype: 'template',\r\n\taltText: 'this is a carousel template',\r\n\ttemplate: {\r\n\t\ttype: 'carousel',\r\n\t\tcolumns: [{\r\n\t\t\tthumbnailImageUrl: 'https://example.com/bot/images/item1.jpg',\r\n\t\t\ttitle: 'this is menu',\r\n\t\t\ttext: 'description',\r\n\t\t\tactions: [{\r\n\t\t\t\ttype: 'postback',\r\n\t\t\t\tlabel: 'Buy',\r\n\t\t\t\tdata: 'action=buy&itemid=111'\r\n\t\t\t}, {\r\n\t\t\t\ttype: 'postback',\r\n\t\t\t\tlabel: 'Add to cart',\r\n\t\t\t\tdata: 'action=add&itemid=111'\r\n\t\t\t}, {\r\n\t\t\t\ttype: 'uri',\r\n\t\t\t\tlabel: 'View detail',\r\n\t\t\t\turi: 'http://example.com/page/111'\r\n\t\t\t}]\r\n\t\t}, {\r\n\t\t\tthumbnailImageUrl: 'https://example.com/bot/images/item2.jpg',\r\n\t\t\ttitle: 'this is menu',\r\n\t\t\ttext: 'description',\r\n\t\t\tactions: [{\r\n\t\t\t\ttype: 'postback',\r\n\t\t\t\tlabel: 'Buy',\r\n\t\t\t\tdata: 'action=buy&itemid=222'\r\n\t\t\t}, {\r\n\t\t\t\ttype: 'postback',\r\n\t\t\t\tlabel: 'Add to cart',\r\n\t\t\t\tdata: 'action=add&itemid=222'\r\n\t\t\t}, {\r\n\t\t\t\ttype: 'uri',\r\n\t\t\t\tlabel: 'View detail',\r\n\t\t\t\turi: 'http://example.com/page/222'\r\n\t\t\t}]\r\n\t\t}]\r\n\t}\r\n});\r\n```\r\n\r\n## Event.source.profile()\r\n\r\nGet user profile information of the sender.\r\n\r\nThis is a shorthand for `LineBot.getUserProfile(event.source.userId);`\r\n\r\n```js\r\nevent.source.profile().then(function (profile) {\r\n\tevent.reply('Hello ' + profile.displayName);\r\n}).catch(function (error) {\r\n\t// error\r\n});\r\n```\r\n## Event.message.content()\r\n\r\nGet image, video, and audio data sent by users as a [Buffer][buffer-url] object.\r\n\r\nThis is a shorthand for `LineBot.getMessageContent(event.message.messageId);`\r\n\r\n```js\r\nevent.message.content().then(function (content) {\r\n\tconsole.log(content.toString('base64'));\r\n}).catch(function (error) {\r\n\t// error\r\n});\r\n```\r\n\r\n# License\r\n\r\n  [MIT](LICENSE)\r\n\r\n[express-url]: http://expressjs.com\r\n[webhook-event-url]: https://devdocs.line.me/en/#webhook-event-object\r\n[send-message-url]: https://devdocs.line.me/en/#send-message-object\r\n[promise-url]: https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Promise\r\n[node-fetch-url]: https://github.com/bitinn/node-fetch\r\n[buffer-url]: https://nodejs.org/api/buffer.html\r\n\r\n[npm-image]: https://img.shields.io/npm/v/linebot.svg\r\n[npm-url]: https://npmjs.org/package/linebot\r\n[dependencies-image]: https://david-dm.org/boybundit/linebot.svg\r\n[dependencies-url]: https://david-dm.org/boybundit/linebot\r\n[downloads-image]: https://img.shields.io/npm/dm/linebot.svg\r\n[downloads-url]: https://npmjs.org/package/linebot\r\n[travis-image]: https://img.shields.io/travis/boybundit/linebot/master.svg\r\n[travis-url]: https://travis-ci.org/boybundit/linebot\r\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/boybundit/linebot.git"
  },
  "scripts": {
    "lint": "eslint index.js lib/**/*.js test/**/*.js",
    "pretest": "eslint index.js lib/**/*.js test/**/*.js",
    "start": "node examples/demo.js",
    "test": "mocha --timeout 5000"
  },
  "version": "1.3.0"
}
